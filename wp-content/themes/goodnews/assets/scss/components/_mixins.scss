
/* mixins */

@mixin opacity($opacity) {

  $opacity-ie: $opacity * 100;
  
  /* IE 8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$opacity-ie+")";

  /* IE 5-7 */
  filter: alpha(opacity=$opacity-ie);

  /* Netscape */
  -moz-opacity: $opacity;

  /* Safari 1.x */
  -khtml-opacity: $opacity;

  /* Good browsers */
  opacity: $opacity;
    
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin breakpoint($point) {
  @if $point == small-only {
    @media #{$screen} and (max-width: #{upper-bound($small-range)})  { @content; }
  }
    @else if $point == medium-up {
    @media #{$screen} and (min-width: #{lower-bound($medium-range)}) { @content; }
  }
    @else if $point == medium-only {
    @media #{$screen} and (min-width: #{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})  { @content; }
  }
    @else if $point == large-up {
    @media #{$screen} and (min-width:#{lower-bound($large-range)})  { @content; }
  }
    @else if $point == large-only {
    @media #{$screen} and (min-width: #{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})  { @content; }
  }
    @else if $point == xlarge-up {
    @media #{$screen} and (min-width: #{lower-bound($xlarge-range)})  { @content; }
  }
    @else if $point == xlarge-only {
    @media #{$screen} and (min-width: #{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})  { @content; }
  }
    @else if $point == xxlarge-up {
    @media #{$screen} and (min-width:#{lower-bound($xxlarge-range)})  { @content; }
  }
    @else if $point == xxlarge-only {
    @media #{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})  { @content; }
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius / $rem-base + rem;
     -moz-border-radius: $radius / $rem-base + rem;
      -ms-border-radius: $radius / $rem-base + rem;
       -o-border-radius: $radius / $rem-base + rem;
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius / $rem-base + rem; 
          border-radius: $radius;
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin animation($animate) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}


@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}

@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 

@mixin scale($scale) {
	 @include transform(scale($scale));
} 

@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}


@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}


@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
	     -o-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
          transform-origin: $origin;
}

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@mixin transitions($string) {
    -webkit-transition: $string;
    -moz-transition: $string;
    -ms-transition: $string;
    -o-transition: $string;
    transition: $string;
}

@mixin box-shadow($string) {
	webkit-box-shadow: $string;
	-moz-box-shadow: $string;
	-ms-box-shadow: $string;
	-o-box-shadow: $string;
	box-shadow: $string;
}