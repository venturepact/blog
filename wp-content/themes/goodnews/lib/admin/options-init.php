<?php

/**
  ReduxFramework Sample Config File
  For full documentation, please visit: https://docs.reduxframework.com
 * */

global $reduxConfig;

if (!class_exists('XT_Redux_Framework_config')) {

    class XT_Redux_Framework_config {

        public $args        = array();
        public $sections    = array();
        public $fields_types = array();
        public $theme;
        public $ReduxFramework;
        public $in_process = false;

        public function __construct() {

            if (!class_exists('ReduxFramework')) {
                return;
            }

            // This is needed. Bah WordPress bugs.  ;)
            if ( true == Redux_Helpers::isTheme( __FILE__ ) ) {
                $this->initSettings();
            } else {
                add_action('plugins_loaded', array($this, 'initSettings'), 10);
            }

        }

        public function initSettings() {

			require_once( XT_WIDGETS_DIR.'/XT_Widget_Advanced_News.php' );


            // Just for demo purposes. Not needed per say.
            $this->theme = wp_get_theme();

            // Set the default arguments
            $this->setArguments();

            // Set a few help tabs so you can see how it's done
            $this->setHelpTabs();

            // Create the sections and fields
            $this->setSections();

            if (!isset($this->args['opt_name'])) { // No errors please
                return;
            }

            // If Redux is running as a plugin, this will remove the demo notice and links
            add_action( 'redux/loaded', array( $this, 'remove_demo' ) );
            
            add_action('admin_init', array( $this, 'on_save_settings' ) );
            
            // Function to test the compiler hook and demo CSS output.
            // Above 10 is a priority, but 2 in necessary to include the dynamically generated CSS to be sent to the function.
            //add_filter('redux/options/'.$this->args['opt_name'].'/compiler', array( $this, 'compiler_action' ), 10, 2);
            

            
            // Change the arguments after they've been declared, but before the panel is created
			//add_filter('redux/options/'.$this->args['opt_name'].'/args', array( $this, 'change_arguments' ) );
            
            // Change the default value of a field after it's been set, but before it's been useds
            //add_filter('redux/options/'.$this->args['opt_name'].'/defaults', array( $this,'change_defaults' ) );
            
            // Dynamically add a section. Can be also used to modify sections/fields
            //add_filter('redux/options/' . $this->args['opt_name'] . '/sections', array($this, 'dynamic_section'));

			
            $this->ReduxFramework = new ReduxFramework($this->sections, $this->args);
			$this->set_compiler_fields();
 
 
			$dynamic_settings = XT_Theme::getDynamicScssFile();
		
			if(!file_exists($dynamic_settings) || (current_user_can('manage_options') && isset($_GET["compile"]))) {
			
				$this->create_dynamic_scss();
			}
		
        }

     
        public function set_compiler_fields() {
	        
	        if(!empty($this->ReduxFramework->compiler_fields) && !empty($this->sections ) && !empty($this->fields_types))
	        	return false;
	        	
	         foreach ( $this->sections as $k => $section ) {
	         	if(empty($section['fields']))
	         		continue;	
				foreach ( $section['fields'] as $fieldk => $field ) {
	         
					if(!empty($field['type']))
						$this->fields_types[ $field['id'] ] = $field['type'];
						 	
					if ( ! empty( $field['compiler'] ) ) {
						 $this->ReduxFramework->compiler_fields[ $field['id'] ] = 1;
						
					}
				}
	        }
        }
        
        public function create_dynamic_scss() {
	        
	        // Demo of how to use the dynamic CSS and write your own static CSS file
			global $wp_filesystem;

			
			if( empty( $wp_filesystem ) ) {
				require_once( ABSPATH .'/wp-admin/includes/file.php' );
				WP_Filesystem();
			}

			if($this->in_process)
				return false;
			
			$this->in_process = true;
				
			if( $wp_filesystem ) {

				$this->set_compiler_fields();
				
				$content = "";
				
				$file_head = "/* This file is dynamically generated by the theme panel compiler. Do not edit manually. */\r\n\r\n";
				$file_head .= '@import "../../bower_components/foundation/scss/foundation/functions";'."\r\n\r\n";

				if (function_exists('is_plugin_active')) {
					
					if(is_plugin_active('woocommerce/woocommerce.php')) {
					
						$content .= "$"."woocommerce: true;\r\n";
					}
					
					if (is_plugin_active('buddypress/bp-loader.php')) {
					
						$content .= "$"."buddypress: true;\r\n";
					}	
					
				}
				
				
				$filename = XT_Theme::getDynamicScssFile();

				$rem_properties = array(
					'font-size',
					'line-height',
					'row-width',
					'off-canvas-width'
				);
				
				$bool_properties = array(
					'topbar',
					'mainmenu',
					'titlebar'
				);

				foreach($this->ReduxFramework->compiler_fields as $key => $value) {

					$value = xt_option($key);

					if(is_array($value)) {
						
						foreach($value as $k => $v) {
							
							if(isset($v) && !is_array($v) && $v != "") {
								if($k == "background-image") {
									$v = 'url('.$v.')';
								}
								if(in_array($k, $rem_properties)) {
									
									$v = "rem-calc($v)";
									
								}else if(in_array($k, $bool_properties)) {
									
									$v = (bool)($v) ? "true" : "false";
								}
								
								$content .= "$".$key."-".$k.": ".$v.";\r\n";
							}	
							
						}
						
					}else{
						
						if(isset($value) && $value != "") {
							
							if(in_array($key, $rem_properties)) {
								
								$value = "rem-calc($value)";
								
							}else if(in_array($key, $bool_properties)) {
									
								$value = (bool)($value) ? "true" : "false";
							}
								
							$content .= "$".$key.": ".$value.";\r\n";
						}	
					}
		
				}

				if(!empty($content)) {
							
					$content = $file_head.$content;
										
					$wp_filesystem->put_contents(
				   	 	$filename,
				   	 	$content,
				   	 	FS_CHMOD_FILE // predefined mode settings for WP files
					);
					
					XT_Theme::sass_compile_flag();

				}
				

			}
			
			$this->in_process = false;
			
        }
        


        /**

          Custom function for filtering the sections array. Good for child themes to override or add to the sections.
          Simply include this function in the child themes functions.php file.

          NOTE: the defined constants for URLs, and directories will NOT be available at this point in a child theme,
          so you must use get_template_directory_uri() if you want to use any of the built in icons

         * */
        function dynamic_section($sections) {
            //$sections = array();
            $sections[] = array(
                'title' => __('Section via hook', XT_TEXT_DOMAIN),
                'desc' => __('<p class="description">This is a section created by adding a filter to the sections array. Can be used by child themes to add/remove sections from the options.</p>', XT_TEXT_DOMAIN),
                'icon' => 'el-icon-paper-clip',
                // Leave this as a blank section, no options just some intro text set above.
                'fields' => array()
            );

            return $sections;
        }

        /**

          Filter hook for filtering the args. Good for child themes to override or add to the args array. Can also be used in other functions.

         * */
/*
        function change_arguments($args) {
            $args['dev_mode'] = true;

            return $args;
        }
*/

        /**

          Filter hook for filtering the default value of any given field. Very useful in development mode.

         * */
        function change_defaults($defaults) {
            $defaults['str_replace'] = 'Testing filter hook!';

            return $defaults;
        }

        // Remove the demo link and the notice of integrated demo from the redux-framework plugin
        function remove_demo() {

            // Used to hide the demo mode link from the plugin page. Only used when Redux is a plugin.
            if (class_exists('ReduxFrameworkPlugin')) {
                remove_filter('plugin_row_meta', array(ReduxFrameworkPlugin::instance(), 'plugin_metalinks'), null, 2);

                // Used to hide the activation notice informing users of the demo panel. Only used when Redux is a plugin.
                remove_action('admin_notices', array(ReduxFrameworkPlugin::instance(), 'admin_notices'));
            }

        }

        function on_save_settings() {

            if(!empty($_GET["page"]) && $_GET["page"] == XT_THEME_OPTIONS_PAGE && !empty($_GET["settings-updated"])) {
	            
            	$this->create_dynamic_scss();
            }
        }
        
        public function setSections() {
			
			$primary_color = '#e8280b';
			$secondary_color = '#eaeaea';
			$text_color_1 = '#181818';
			$text_color_2 = '#b7b7b7';
			$text_color_3 = '#8b8c8e';
			$bg_color_light = '#f3f3f3';
			$bg_color_dark = '#e6e6e6';
			$global_border_color = '#eaeaea';
			
			$currently_in_options = !empty($_GET["page"]) && ($_GET["page"] == $this->args["page_slug"]);

			if($currently_in_options) {
				
	            ob_start();
	
	            $ct             = wp_get_theme();
	            $this->theme    = $ct;
	            $item_name      = $this->theme->get('Name');
	            $tags           = $this->theme->Tags;
	            $screenshot     = $this->theme->get_screenshot();
	            $class          = $screenshot ? 'has-screenshot' : '';
	
	            $customize_title = sprintf(__('Customize &#8220;%s&#8221;', XT_TEXT_DOMAIN), $this->theme->display('Name'));
	            
	            ?>
	            <div id="current-theme" class="<?php echo esc_attr($class); ?>">
	            <?php if ($screenshot) : ?>
	                <?php if (current_user_can('edit_theme_options')) : ?>
	                        <a href="<?php echo wp_customize_url(); ?>" class="load-customize hide-if-no-customize" title="<?php echo esc_attr($customize_title); ?>">
	                            <img src="<?php echo esc_url($screenshot); ?>" alt="<?php esc_attr_e('Current theme preview'); ?>" />
	                        </a>
	                <?php endif; ?>
	                    <img class="hide-if-customize" src="<?php echo esc_url($screenshot); ?>" alt="<?php esc_attr_e('Current theme preview'); ?>" />
	                <?php endif; ?>
	
	                <h4><?php echo $this->theme->display('Name'); ?></h4>
	
	                <div>
	                    <ul class="theme-info">
	                        <li><?php printf(__('By %s', XT_TEXT_DOMAIN), $this->theme->display('Author')); ?></li>
	                        <li><?php printf(__('Version %s', XT_TEXT_DOMAIN), $this->theme->display('Version')); ?></li>
	                        <li><?php echo '<strong>' . __('Tags', XT_TEXT_DOMAIN) . ':</strong> '; ?><?php printf($this->theme->display('Tags')); ?></li>
	                    </ul>
	                    <p class="theme-description"><?php echo $this->theme->display('Description'); ?></p>
	            <?php
	            if ($this->theme->parent()) {
	                printf(' <p class="howto">' . __('This <a href="%1$s">child theme</a> requires its parent theme, %2$s.') . '</p>', __('http://codex.wordpress.org/Child_Themes', XT_TEXT_DOMAIN), $this->theme->parent()->display('Name'));
	            }
	            ?>
	
	                </div>
	            </div>
	
	            <?php
	            $item_info = ob_get_contents();
	            ob_end_clean();

			}
			
			if($currently_in_options && file_exists(XT_ADMIN_DIR . '/redux-pages/docs.php')) {
		
				ob_start();
				include_once(XT_ADMIN_DIR . '/redux-pages/docs.php');
				$docs = ob_get_contents();
				ob_end_clean();
		
				$this->sections[] = array(
					// Redux uses the Font Awesome iconfont to supply its default icons.
					// If $redux_args['icon_type'] = 'iconfont', this should be the icon name minus 'icon-'.
					// If $redux_args['icon_type'] = 'image', this should be the path to the icon.
					// Icons can also be overridden on a section-by-section basis by defining 'icon_type' => 'image'
					'icon' => 'el-icon-home',
					'icon_class' => 'fa-lg',
					'title' => __('Getting Started', XT_TEXT_DOMAIN),
					'desc' => '',
					'fields' => array(
						array(
							'id' => 'docs',
							'type' => 'info',
							'raw_html'  => true,
							'desc' => $docs
						)
					)
				);
			}
			
			if($currently_in_options && file_exists(XT_ADMIN_DIR . '/redux-pages/import.php')) {
		
				ob_start();
				include_once (XT_ADMIN_DIR . '/redux-pages/import.php');
				$importData = ob_get_contents();
				ob_end_clean();
		
				$this->sections[] = array(
					'icon' => 'el-icon-download-alt',
					'icon_class' => 'fa-lg',
					'title' => __('Import Demos', XT_TEXT_DOMAIN),
					'desc' => '<p class="description">' . __('Here you can clone our theme demos instantly.<br><b>Note:</b> <span style="font-weight:bold;color:green">Make sure to install Prepackaged required plugins before importing our demos or else revolution sliders will not be imported and page contents will not appear correctly.</span>', XT_TEXT_DOMAIN) . '</p>',
					'fields' => array(
						array(
							'id' => 'import_default_data',
							'type' => 'info',
							'raw_html'  => true,
							'title' => __('Import Demos', XT_TEXT_DOMAIN),
							'subtitle' => '<p class="description">' . __('This will flush all your current data and clone our theme demo contents.<br><font color="red">Please note that this could take up to 3 minutes.</font>', XT_TEXT_DOMAIN) . '</p>',
							'desc' => $importData
						)
					)
				);
		
			}
			
			$this->sections[] = array(
				'icon' => 'el-icon-cogs',
				'icon_class' => 'fa-lg',
				'title' => __('General Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some general settings that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
			
					array(
						'id' => 'enable_nice_scroll',
						'type' => 'switch',
						'title' => __('Enable NiceScroll', XT_TEXT_DOMAIN),
						'subtitle' => '<p class="description">' . __('This will style the default scrollbar and will add a nice scrolling effect', XT_TEXT_DOMAIN) . '</p>',
						'default' => false
					),
					array(
						'id' => 'enable_smooth_scroll',
						'type' => 'switch',
						'title' => __('Enable Smooth Scroll', XT_TEXT_DOMAIN),
						'subtitle' => '<p class="description">' . __('This will add a smooth scrolling effect. You can enable this globally, but it\s only recommended for pages with parallax sections. To do so, you can enable smooth scrolling within the Visual Composer Row / Parallax Settings', XT_TEXT_DOMAIN) . '</p>',
						'default' => false
					),
					array(
						'id' => 'hide_admin_bar',
						'type' => 'switch',
						'title' => __('Hide admin bar on the front-end', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id' => 'admin_bar_position',
						'required' => array( 'hide_admin_bar', '!=', '1' ),
						'type' => 'radio',
						'title' => __('Admin bar position', XT_TEXT_DOMAIN),
						'options' => array(
							'top' => __('Top', XT_TEXT_DOMAIN),
							'bottom' => __('Bottom', XT_TEXT_DOMAIN),
						),
						'default' => 'top'
					),
				)
			);


			$this->sections[] = array(
				'icon' => 'el-icon-asterisk',
				'icon_class' => 'fa-lg',
				'title' => __('Look & feel', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some global look & feel options that you can edit.<br><b>Note:</b> These options can be overridden by other sections.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
		
					array(
						'id'    => 'general_look_and_feel',
						'type'  => 'section',
						'title' => __('Global Look & Feel Options ', XT_TEXT_DOMAIN),
					),

					array(
						'id' => 'row-width',
						'type' => 'text',
						'title' => __('Grid Width', XT_TEXT_DOMAIN),
						'default' => '1152px',
						'compiler' => array(true)
					),
					
					array(
						'id' => 'main-layout',
						'type' => 'radio',
						'title' => __('Main Layout', XT_TEXT_DOMAIN),
						'options' => array(
							'boxed'   => __( 'Boxed' , XT_TEXT_DOMAIN ),
							'full' => __( 'Full Width', XT_TEXT_DOMAIN ),
						),
						'default' => 'full',
						'compiler' => array(true)
					),
					
					array(
						'id' => 'body-bg',
						'type' => 'background',
						'title' => __('Body Background', XT_TEXT_DOMAIN),
						'default' => array(
							'background-color' => '#ffffff'
						),
						'preview_media'   => true,
						'compiler' => array(true)
					),	
					
					array(
						'id' => 'body-overlay-color',
						'type' => 'color_rgba',
						'title' => __('Body Background Overlay', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => ''
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'content-bg-background-color',
						'required' => array( 'main-layout', '=', 'boxed' ),
						'type' => 'color_rgba',
						'title' => __('Inner Content Background', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => ''
						),
						'compiler' => array(true)
					),

					array(
						'id' => 'primary-color',
						'type' => 'color_rgba',
						'title' => __('Primary Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'text-color-1',
						'type' => 'color_rgba',
						'title' => __('Text Color 1', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'text-color-2',
						'type' => 'color_rgba',
						'title' => __('Text Color 2', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_2
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'text-color-3',
						'type' => 'color_rgba',
						'title' => __('Text Color 3', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_3
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'bg-color-light',
						'type' => 'color_rgba',
						'title' => __('Background Color Light', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $bg_color_light
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'bg-color-dark',
						'type' => 'color_rgba',
						'title' => __('Background Color Dark', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $bg_color_dark
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'border-color',
						'type' => 'color_rgba',
						'title' => __('Border Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $global_border_color
						),
						'compiler' => array(true)
					),
					
					array(
						'id'    => 'alerts_look_and_feel',
						'type'  => 'section',
						'title' => __('Alerts Options ', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'alert-bg-color',
						'type' => 'color_rgba',
						'title' => __('Alert Box Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffddcf'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'alert-border-color',
						'type' => 'color_rgba',
						'title' => __('Alert Box Border Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffddcf'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'alert-text-color',
						'type' => 'color_rgba',
						'title' => __('Alert Box Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#f92800'
						),
						'compiler' => array(true)
					),
										
					array(
						'id' => 'success-bg-color',
						'type' => 'color_rgba',
						'title' => __('Success Box Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#e6f3d4'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'success-border-color',
						'type' => 'color_rgba',
						'title' => __('Success Box Border Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#e6f3d4'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'success-text-color',
						'type' => 'color_rgba',
						'title' => __('Success Box Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#689921'
						),
						'compiler' => array(true)
					),
					
					array(
						'id' => 'warning-bg-color',
						'type' => 'color_rgba',
						'title' => __('Warning Box Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff0c6'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'warning-border-color',
						'type' => 'color_rgba',
						'title' => __('Warning Box Border Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff0c6'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'warning-text-color',
						'type' => 'color_rgba',
						'title' => __('Warning Box Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					
					array(
						'id' => 'info-bg-color',
						'type' => 'color_rgba',
						'title' => __('Info Box Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ddf1ff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'info-border-color',
						'type' => 'color_rgba',
						'title' => __('Info Box Border Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ddf1ff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'info-text-color',
						'type' => 'color_rgba',
						'title' => __('Info Box Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#4f4f4f'
						),
						'compiler' => array(true)
					),
					
					array(
						'id'    => 'advanced_look_and_feel',
						'type'  => 'section',
						'title' => __('Advanced Options ', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'custom_css',
						'type' => 'ace_editor',
						'title' => __('Custom CSS', XT_TEXT_DOMAIN),
						'subtitle' => __('This is for advanced users', XT_TEXT_DOMAIN),
						'mode'      => 'css',
                        'theme'     => 'chrome',
						'default' => '',
					),
					array(
						'id' => 'custom_js',
						'type' => 'ace_editor',
						'title' => __('Custom Javascript', XT_TEXT_DOMAIN),
						'subtitle' => __('This is for advanced users. Javascript will be executed on jQuery(document).ready($)', XT_TEXT_DOMAIN),
						'mode'      => 'javascript',
                        'theme'     => 'chrome',
						'default' => ''
					),
									
				)
			);
		
			$this->sections[] = array(
				'icon' => ' el-icon-bold',
				'icon_class' => 'fa-lg',
				'title' => __('Typography', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some typography options that you can edit.<br><b>Note:</b> These options can be overridden by other sections.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
		
					array(
						'id'	=> 'body_typography_section', 
						'type'  => 'section',
						'title' => __('Body Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'body',
						'type' => 'typography',
						'title' => __('Body Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '400',
		                    'font-size'       => '16px',
		                    'line-height'     => '24px',
		                    'color' 		  => $text_color_1
		                ),
						'compiler' => array(true)
					),

					array(
						'id'	=> 'h1-section', 
						'type'  => 'section',
						'title' => __('H1 Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'h1',
						'type' => 'typography',
						'title' => __('Heading 1 Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '700',
		                    'font-size'       => '48px',
		                    'line-height'     => '50px',
		                ),
						'compiler' => true
					),
					
					array(
						'id'	=> 'h2-section', 
						'type'  => 'section',
						'title' => __('H2 Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'h2',
						'type' => 'typography',
						'title' => __('Heading 2 Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '700',
		                    'font-size'       => '30px',
		                    'line-height'     => '38px',
		                ),
						'compiler' => array(true)
					),
					
					array(
						'id'	=> 'h3-section', 
						'type'  => 'section',
						'title' => __('H3 Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'h3',
						'type' => 'typography',
						'title' => __('Heading 3 Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '300',
		                    'font-size'       => '24px',
		                    'line-height'     => '30px',
		                ),
						'compiler' => array(true)
					),
					
					array(
						'id'	=> 'h4-section', 
						'type'  => 'section',
						'title' => __('H4 Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'h4',
						'type' => 'typography',
						'title' => __('Heading 4 Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '400',
		                    'font-size'       => '18px',
		                    'line-height'     => '27px',
		                ),
						'compiler' => array(true)
					),
					
					array(
						'id'	=> 'h5-section', 
						'type'  => 'section',
						'title' => __('H5 Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'h5',
						'type' => 'typography',
						'title' => __('Heading 5 Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '400',
		                    'font-size'       => '16px',
		                    'line-height'     => '27px',
		                ),
						'compiler' => array(true)
					),
					
					array(
						'id'	=> 'h6-section', 
						'type'  => 'section',
						'title' => __('H6 Typography', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'h6',
						'type' => 'typography',
						'title' => __('Heading 6 Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-script'     => '',
		                    'font-weight'     => '400',
		                    'font-size'       => '14px',
		                ),
						'compiler' => array(true)
					),
				)
			);
		
			$this->sections[] = array(
				'icon' => 'el-icon-chevron-up',
				'icon_class' => 'fa-lg',
				'title' => __('Header Options', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some header options that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
				

					// Top Bar
					array(
						'id'    => 'top_bar_look_and_feel',
						'type'  => 'section',
						'title' => __('Top Bar', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'topbar',
						'type' => 'switch',
						'title' => __('Enable Top Bar', XT_TEXT_DOMAIN),
						'subtitle' => __('Note: Top Bar will always be shown in mobile view even if this option is switched off', XT_TEXT_DOMAIN),
						'default' => 1,
						'compiler' => array(true),
					),
					array(
						'id' => 'topbar-height',
						'type' => 'text',
						'title' => __('Top Bar Height', XT_TEXT_DOMAIN),
						'default' => '85px',
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-container',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'radio',
						'title' => __('Top Bar Container', XT_TEXT_DOMAIN),
						'options' => array(
							'boxed'   => __( 'Boxed' , XT_TEXT_DOMAIN ),
							'full' => __( 'Full Width', XT_TEXT_DOMAIN ),
						),
						'default' => 'boxed',
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-show-logo',
						'type' => 'switch',
						'title' => __('Show Logo In Top Bar', XT_TEXT_DOMAIN),
						'subtitle' => __('Note: Top Bar logo will always be shown in mobile view even if this option is switched off', XT_TEXT_DOMAIN),
						'default' => 1,
					),
					
					array(
						'id' => 'header_logo',
						'type'      => 'media',
                        'preview'   => true,
						'title' => __('Top Bar Logo', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your logo', XT_TEXT_DOMAIN),
						'default' => array(
							'url' => XT_ASSETS_URL."/images/logo.png",
						),	
					),
					array(
						'id' => 'retina_header_logo',
						'type'      => 'media',
                        'preview'   => true,
						'title' => __('Retina Top Bar Logo', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your retina logo (2x)', XT_TEXT_DOMAIN),
						'default' => array(
							'url' => xt_option('topbar-logo', 'url'),
						),	
					),
		
							
					array(
						'id' => 'topbar-followus',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'switch',
						'title' => __('Show Follow Us Toggle', XT_TEXT_DOMAIN),
						'default' => 1,
					),
					
					array(
						'id' => 'topbar-typo',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'typography',
						'title' => __('Top Bar Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-weight'     => '300',
		                ),						
		                'color' => false,
						'text-align' => false,
						'line-height' => false,
						'font-size' => false,
						'font-style' => false,
						'compiler' => array(true)
					),	
					
					array(
						'id' => 'topbar-bg-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-item-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Link Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-item-hover-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Link Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					
					array(
						'id' => 'topbar-button-text-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Button Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-button-bg-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Button Bg Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-button-hover-text-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Button Hover Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color,
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-button-hover-bg-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Top Bar Button Hover Bg Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),

					
					// Sticky Top Bar
					
					array(
						'id'    => 'topbar_sticky_look_and_feel',
						'type'  => 'section',
						'title' => __('Sticky Top Bar', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'topbar-sticky',
						'type' => 'switch',
						'title' => __('Enable Sticky Top Bar', XT_TEXT_DOMAIN),
						'subtitle' => '<p class="description">' . __('This will make the top bar fixed on page scroll', XT_TEXT_DOMAIN) . '</p>',
						'default' => true,
						'compiler' => array(true),
					),
					array(
						'id' => 'topbar-sticky-distance',
						'required' => array( 'topbar-sticky', '=', '1' ),
						'type' => 'text',
						'title' => __('Sticky Top Bar Distance', XT_TEXT_DOMAIN),
						'subtitle' => '<p class="description">' . __('The top bar will become sticky on scroll after this distance.', XT_TEXT_DOMAIN) . '</p>',
						'default' => '200px',
					),
					array(
						'id' => 'topbar-sticky-height',
						'required' => array( 'topbar-sticky', '=', '1' ),
						'type' => 'text',
						'title' => __('Sticky Top Bar Height', XT_TEXT_DOMAIN),
						'default' => '60px',
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-sticky-page-title',
						'required' => array( 'topbar-sticky', '=', '1' ),
						'type' => 'switch',
						'title' => __('Show Page Title Within Sticky Top Bar', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'topbar-sticky-bg-color',
						'required' => array( 'topbar-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color,
							'alpha' => 0.95
						),
						'compiler' => array(true)
					),					
					array(
						'id' => 'topbar-sticky-item-color',
						'required' => array( 'topbar-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Item Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-sticky-item-hover-color',
						'required' => array( 'topbar-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Item Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),

					array(
						'id' => 'topbar-sticky-button-text-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Button Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-sticky-button-bg-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Button Bg Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-sticky-button-hover-text-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Button Hover Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color,
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-sticky-button-hover-bg-color',
						'required' => array( 'topbar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Top Bar Button Hover Bg Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					

					// Push Menu
					array(
						'id'    => 'push_menu_look_and_feel',
						'type'  => 'section',
						'title' => __('Push Menu', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'push-menu-position',
						'type' => 'radio',
						'title' => __('Enable Push Menu', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled'   => __( 'Disabled' , XT_TEXT_DOMAIN ),
							'left' => __( 'Left Menu', XT_TEXT_DOMAIN ),
							'right'  => __( 'Right Menu', XT_TEXT_DOMAIN ),
						),
						'default' => 'left',
						'compiler' => array(true)
					),
					array(
						'id' => 'push-menu-toggle',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'radio',
						'title' => __('Show Push Menu Toggle', XT_TEXT_DOMAIN),
						'options' => array(
							'onsticky'   => __( 'On Sticky Top Bar only' , XT_TEXT_DOMAIN ),
							'always' => __( 'Always', XT_TEXT_DOMAIN ),
						),
						'default' => 'onsticky',
					),
					
					array(
						'id' => 'off-canvas-text-align',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'radio',
						'title' => __('Show Push Menu Text Align', XT_TEXT_DOMAIN),
						'options' => array(
							'left' => __( 'Left', XT_TEXT_DOMAIN ),
							'right'  => __( 'Right', XT_TEXT_DOMAIN ),
							'center'   => __( 'Centered' , XT_TEXT_DOMAIN ),
						),
						'default' => 'left',
						'compiler' => array(true)
					),
					
					array(
						'id' => 'off-canvas-width',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'text',
						'title' => __('Show Push Menu Text Align', XT_TEXT_DOMAIN),
						'default' => '215px',
						'compiler' => array(true)
					),

					array(
						'id' => 'off-canvas-bg',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#fff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'off-canvas-label-color',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Label Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_2
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'off-canvas-label-bg',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Label Bg Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => ''
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'off-canvas-link-color',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Link Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'off-canvas-link-bg-color',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Link Bg Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => ''
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'off-canvas-link-hover-color',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Link Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => ''
						),
						'compiler' => array(true)
					),				
					array(
						'id' => 'off-canvas-link-bg-hover-color',
						'required' => array( 'push-menu-position', '!=', 'disabled' ),
						'type' => 'color_rgba',
						'title' => __('Push Menu Link Bg Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $secondary_color
						),
						'compiler' => array(true)
					),
					
										

					// Search Bar
					array(
						'id'    => 'search_bar_look_and_feel',
						'type'  => 'section',
						'title' => __('Search Bar', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'search-bar-toggle-position',
						'type' => 'radio',
						'title' => __('Top Bar Search Toggle Position', XT_TEXT_DOMAIN),
						'subtitle' => __('The search toggle will appear within the <b>Top Bar</b>', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled'   => __( 'Disabled' , XT_TEXT_DOMAIN ),
							'left' => __( 'Left', XT_TEXT_DOMAIN ),
							'right'  => __( 'Right', XT_TEXT_DOMAIN ),
						),
						'default' => 'left',
						'compiler' => array(true)
					),
					array(
						'id' => 'search-bar-toggle',
						'required' => array( 'search-bar-toggle-position', '!=', 'disabled' ),
						'type' => 'radio',
						'title' => __('Show Top Bar Search Toggle', XT_TEXT_DOMAIN),
						'options' => array(
							'onsticky'   => __( 'On Sticky Top Bar only' , XT_TEXT_DOMAIN ),
							'always' => __( 'Always', XT_TEXT_DOMAIN ),
						),
						'default' => 'onsticky',
					),

array(
					'id' => 'mainmenu-search-bar-toggle-enabled',
						'type' => 'switch',
						'title' => __('Enable Main Menu Search Toggle', XT_TEXT_DOMAIN),
						'subtitle' => __('The search toggle will appear within the <b>Main Menu</b>', XT_TEXT_DOMAIN),
						'default' => 1,
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-search-bar-toggle',
						'required' => array( 'mainmenu-search-bar-toggle-enabled', '=', '1' ),
						'type' => 'radio',
						'title' => __('Show Main Menu Search Toggle', XT_TEXT_DOMAIN),
						'options' => array(
							'onunsticky'   => __( 'On Unsticky Main Menu only' , XT_TEXT_DOMAIN ),
							'onsticky'   => __( 'On Sticky Main Menu only' , XT_TEXT_DOMAIN ),
							'always' => __( 'Always', XT_TEXT_DOMAIN ),
						),
						'default' => 'onsticky',
					),
					

					// Main Menu
					array(
						'id'    => 'main_menu_look_and_feel',
						'type'  => 'section',
						'title' => __('Main Menu', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'mainmenu',
						'type' => 'switch',
						'title' => __('Enable Main Menu', XT_TEXT_DOMAIN),
						'default' => 1,
						'compiler' => array(true),
					),
					
					array(
						'id' => 'mainmenu-height',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'text',
						'title' => __('Main Menu Height', XT_TEXT_DOMAIN),
						'default' => '90px',
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-container',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'radio',
						'title' => __('Main Menu Container', XT_TEXT_DOMAIN),
						'options' => array(
							'boxed'   => __( 'Boxed' , XT_TEXT_DOMAIN ),
							'full' => __( 'Full Width', XT_TEXT_DOMAIN ),
						),
						'default' => 'boxed',
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-stretch-items',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'switch',
						'title' => __('Main Menu Stretch Items', XT_TEXT_DOMAIN),
						'default' => false
					),
					
					array(
						'id' => 'mainmenu-show-logo',
						'type' => 'switch',
						'title' => __('Show Logo In Main Menu', XT_TEXT_DOMAIN),
						'default' => 0,
					),
					
					array(
						'id' => 'mainmenu-logo',
						'required' => array( 'mainmenu-show-logo', '=', '1' ),
						'type'      => 'media',
                        'preview'   => true,
						'title' => __('Main Menu Logo', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your logo', XT_TEXT_DOMAIN),
						'default' => array(),	
					),
					array(
						'id' => 'mainmenu-retina-logo',
						'required' => array( 'mainmenu-show-logo', '=', '1' ),
						'type'      => 'media',
                        'preview'   => true,
						'title' => __('Retina Main Menu Logo', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your retina logo (2x)', XT_TEXT_DOMAIN),
						'default' => array(),	
					),
		
					array(
						'id' => 'mainmenu-typo',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'typography',
						'title' => __('Main Menu Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-weight'     => '400',
		                ),
						'color' => false,
						'text-align' => false,
						'line-height' => false,
						'font-size' => false,
						'font-style' => false,
						'compiler' => array(true)
					),	
									
					array(
						'id' => 'mainmenu-bg-color',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Main Menu Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffffff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-item-color',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Main Menu Item Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-item-hover-color',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Main Menu Item Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-icons-color',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Main Menu Icons Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#888'
						),
						'compiler' => array(true)
					),
					
					array(
						'id' => 'mainmenu-item-size-medium-screens',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'text',
						'title' => __('Main Menu Item Size On Medium Screens', XT_TEXT_DOMAIN),
						'default' => '20px',
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-item-size-large-screens',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'text',
						'title' => __('Main Menu Item Size On Large Screens', XT_TEXT_DOMAIN),
						'default' => '24px',
						'compiler' => array(true)
					),


					// Main Menu Dropdown
					array(
						'id'    => 'main_menu_dropdowns_look_and_feel',
						'type'  => 'section',
						'title' => __('Main Menu Dropdowns', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'mainmenu-dropdown-item-bg',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Dropdown Item Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffffff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-dropdown-item-color',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Dropdown Item Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-dropdown-item-hover-bg',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Dropdown Item Hover / Active Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffffff'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-dropdown-item-hover-color',
						'required' => array( 'mainmenu', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Dropdown Hover / Active Item Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),

					// Sticky Main Menu
					array(
						'id'    => 'mainmenu_sticky_look_and_feel',
						'type'  => 'section',
						'title' => __('Sticky Main Menu', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'mainmenu-sticky',
						'type' => 'switch',
						'title' => __('Enable Sticky Main Menu', XT_TEXT_DOMAIN),
						'subtitle' => '<p class="description">' . __('This will make the main menu fixed on page scroll', XT_TEXT_DOMAIN) . '</p>',
						'default' => false,
						'compiler' => array(true),
					),
					array(
						'id' => 'mainmenu-sticky-distance',
						'required' => array( 'mainmenu-sticky', '=', '1' ),
						'type' => 'text',
						'title' => __('Sticky Main Menu Distance', XT_TEXT_DOMAIN),
						'subtitle' => '<p class="description">' . __('The main menu will become sticky on scroll after this distance.', XT_TEXT_DOMAIN) . '</p>',
						'default' => '200px',
					),
					array(
						'id' => 'mainmenu-sticky-height',
						'required' => array( 'mainmenu-sticky', '=', '1' ),
						'type' => 'text',
						'title' => __('Sticky Main Menu Height', XT_TEXT_DOMAIN),
						'default' => '65px',
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-sticky-bg-color',
						'required' => array( 'mainmenu-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Main Menu Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $bg_color_light,
							'alpha' => 0.95
						),
						'compiler' => array(true)
					),					
					array(
						'id' => 'mainmenu-sticky-item-color',
						'required' => array( 'mainmenu-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Main Menu Item Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-sticky-item-hover-color',
						'required' => array( 'mainmenu-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Main Menu Item Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'mainmenu-sticky-icons-color',
						'required' => array( 'mainmenu-sticky', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Sticky Main Menu Icons Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#888'
						),
						'compiler' => array(true)
					),
					
					
					// Mobile Menu
					array(
						'id'    => 'mobile_menu_look_and_feel',
						'type'  => 'section',
						'title' => __('Mobile Menu', XT_TEXT_DOMAIN),
					),
						
					array(
						'id' => 'topbar-mobile-menu-followus',
						'type' => 'switch',
						'title' => __('Show Follow Us Icons', XT_TEXT_DOMAIN),
						'default' => 1,
					),
					array(
						'id' => 'topbar-mobile-menu-search',
						'type' => 'switch',
						'title' => __('Show Search Form', XT_TEXT_DOMAIN),
						'default' => 1,
					),
					array(
						'id' => 'topbar-mobile-menu-toggle-bg-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Toggle Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => xt_option('topbar-bg-color', 'color')
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-mobile-menu-toggle-bg-active-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Toggle Background Active Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => xt_option('topbar-mobile-menu-toggle-bg-color', 'color')
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-mobile-menu-bg-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#242424'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-mobile-menu-items-bg-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Items Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#242424'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-mobile-menu-items-link-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Items Link Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffffff'
						),
						'compiler' => array(true)
					),	
					array(
						'id' => 'topbar-mobile-menu-items-bg-hover-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Items Background Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-mobile-menu-items-link-hover-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Items Link Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffffff'
						),
						'compiler' => array(true)
					),	
					array(
						'id' => 'topbar-mobile-menu-items-border-color',
						'type' => 'color_rgba',
						'title' => __('Mobile Menu Items Border Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#444444'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'topbar-mobile-menu-sublevel-animation',
						'type' => 'select',
						'title' => __('Mobile Menu Sublevel Animation', XT_TEXT_DOMAIN),
						'options' => array(
							'fade'   => __( 'Fade' , XT_TEXT_DOMAIN ),
							'slide' => __( 'Slide', XT_TEXT_DOMAIN ),
							'rotate'  => __( 'Rotate 3D', XT_TEXT_DOMAIN ),
						),
						'default' => 'fade',
						'compiler' => array(true)
					),	
					


					// Mega Menu
					array(
						'id'    => 'megamenu_look_and_feel',
						'type'  => 'section',
						'title' => __('Mega Menu', XT_TEXT_DOMAIN),
					),

					array(
						'id' => 'megamenu-show-tags-links',
						'type' => 'switch',
						'title' => __('Show Category Related Tags', XT_TEXT_DOMAIN),
						"default"   => 1,
						'on' => 'Yes',
						'off' => 'No',
					),
					
					array(
						'id' => 'megamenu-show-subcategory-links',
						'type' => 'switch',
						'title' => __('Show Sub Category Links', XT_TEXT_DOMAIN),
						"default"   => 1,
						'on' => 'Yes',
						'off' => 'No',
					),	
					
					array(
						'id' => 'megamenu-show-submenu-links',
						'type' => 'switch',
						'title' => __('Show Sub Menu Links', XT_TEXT_DOMAIN),
						"default"   => 1,
						'on' => 'Yes',
						'off' => 'No',
					),	
										
					array(
						'id' => 'megamenu-bg-color',
						'type' => 'color_rgba',
						'title' => __('Mega Menu Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $bg_color_light
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'megamenu-post-title-color',
						'type' => 'color_rgba',
						'title' => __('Mega Menu Post Title Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'megamenu-post-title-hover-color',
						'type' => 'color_rgba',
						'title' => __('Mega Menu Post Title Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'megamenu-submenu-label-color',
						'type' => 'color_rgba',
						'title' => __('Mega Menu Submenu Label Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_2
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'megamenu-submenu-item-color',
						'type' => 'color_rgba',
						'title' => __('Mega Menu Submenu Item Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_1
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'megamenu-submenu-item-hover-color',
						'type' => 'color_rgba',
						'title' => __('Mega Menu Submenu Item Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),

						
					// Title Bar					
					array(
						'id'    => 'title_look_and_feel',
						'type'  => 'section',
						'title' => __('Title Bar', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'titlebar',
						'type' => 'switch',
						'title' => __('Enable Title Bar', XT_TEXT_DOMAIN),
						'default' => 1,
						'compiler' => array(true),
					),
					
					array(
						'id' => 'titlebar-height',
						'required' => array( 'titlebar', '=', '1' ),
						'type' => 'text',
						'title' => __('Title Bar Height', XT_TEXT_DOMAIN),
						'default' => '90px',
						'compiler' => array(true)
					),

					array(
						'id' => 'titlebar-bg-color',
						'required' => array( 'titlebar', '=', '1' ),
						'type' => 'color_rgba',
						'title' => __('Title Bar Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $bg_color_light
						),
						'compiler' => array(true)
					),

					array(
						'id' => 'titlebar-title-typo',
						'required' => array( 'titlebar', '=', '1' ),
						'type' => 'typography',
						'title' => __('Title Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-weight'     => '400',
		                    'font-size'       => '30px',
		                    'color'			  => $text_color_1
		                ),
						'text-align' => false,
						'compiler' => array(true)
					),

					array(
						'id' => 'titlebar-breadcrumbs',
						'required' => array( 'titlebar', '=', '1' ),
						'type' => 'switch',
						'title' => __('Enable Breadcrumbs', XT_TEXT_DOMAIN),
						'default' => 1,
						'compiler' => array(true),
					),
					
					array(
						'id' => 'titlebar-breadcrumbs-typo',
						'required' => array( 
							array('titlebar', '=', '1'),
							array('titlebar-breadcrumbs', '=', '1')
						),
						'type' => 'typography',
						'title' => __('Breadcrumbs Typography', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a font, font size and color', XT_TEXT_DOMAIN),
						'default' => array(
		                    'font-family'     => 'Roboto',
		                    'google'          => true,
		                    'font-weight'     => '300',
		                    'font-size'       => '14px',
		                    'color'       	  => $text_color_3
		                ),
						'text-align' => false,
						'compiler' => array(true)
					)

				)
			);
		
			
			$this->sections[] = array(
				'icon' => 'el-icon-chevron-down',
				'icon_class' => 'fa-lg',
				'title' => __('Footer Options', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some footer options that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(

					
					// Footer					
					array(
						'id'    => 'footer_look_and_feel',
						'type'  => 'section',
						'title' => __('Footer', XT_TEXT_DOMAIN),
					),
					
					array(
						'id'=>'footer-enabled',
						'type' => 'switch',
						'title' => __( 'Footer', XT_TEXT_DOMAIN ),
						'subtitle'=> __( 'Will be located after content. Please note that sub footer will not be affected by this option.', XT_TEXT_DOMAIN ),
						'desc'=> __( 'If you don\'t want to have footer section you can disable it.', XT_TEXT_DOMAIN ),
						"default"   => 1,
						'on' => 'Enable',
						'off' => 'Disable',
					),
					array(
						'id'    => 'footer_widget_zone',
						'required' => array( 'footer-enabled', 'equals', '1' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Widget Area', XT_TEXT_DOMAIN),
						'default'   => 'footer-widget-zone'
					),
					array(
						'id'=>'footer_widget_zone_layout',
						'required' => array( 'footer-enabled', 'equals', '1' ),
						'type' => 'image_select',
						'title' => __( 'Footer Widget Area Columns', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure footer widget areas would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Please choose your footer widget area column structure. Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => 'custom_4_4_2_2'
					),					


					array(
						'id' => 'footer-bg-color',
						'type' => 'color_rgba',
						'title' => __('Footer Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#252525'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'footer-text-color',
						'type' => 'color_rgba',
						'title' => __('Footer Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $text_color_3
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'footer-link-color',
						'type' => 'color_rgba',
						'title' => __('Footer Link Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => xt_option('footer-text-color', 'color')
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'footer-link-hover-color',
						'type' => 'color_rgba',
						'title' => __('Footer Link Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'footer-seperator-color',
						'type' => 'color_rgba',
						'title' => __('Footer Link Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#2e2e2e',
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'footer-h2-color',
						'type' => 'color_rgba',
						'title' => __('Footer H2 Title Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'footer-h3-color',
						'type' => 'color_rgba',
						'title' => __('Footer H3 Title Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#ffffff'
						),
						'compiler' => array(true)
					),
					
					// Sub Footer	

					array(
						'id'    => 'footer_bottom_look_and_feel',
						'type'  => 'section',
						'title' => __('Sub Footer', XT_TEXT_DOMAIN),
					),
					
					array(
						'id'=>'sub-footer-enabled',
						'type' => 'switch',
						'title' => __( 'Sub Footer', XT_TEXT_DOMAIN ),
						'subtitle'=> __( 'Located below footer.', XT_TEXT_DOMAIN ),
						'desc'=> __( 'If you don\'t want to have sub footer section you can disable it.', XT_TEXT_DOMAIN ),
						"default"   => 1,
						'on' => 'Enable',
						'off' => 'Disable',
					),
					array(
						'id'=>'footer-copyright',
						'type' => 'textarea',
						'required' => array( 'sub-footer', 'equals', '1' ),
						'title' => __( 'Sub Footer Copyright text', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'You may write your site copyright information.', XT_TEXT_DOMAIN ),
						'desc' => '',
						'default' => __('Copyright All Rights Reserved', 'vfx')
					),



					array(
						'id' => 'footer_back_to_top_enabled',
						'type' => 'switch',
						'title' => __('Back To Top Button', XT_TEXT_DOMAIN),
						"default"   => 1,
						'on' => 'Enable',
						'off' => 'Disable',
					),	
					array(
						'id' => 'footer_back_to_top_text',
						'type' => 'text',
						'title' => __('Back To Top Button Text', XT_TEXT_DOMAIN),
						'default' => 'Back to top'
					),		
					array(
						'id' => 'footer_copyright',
						'type' => 'editor',
						'title' => __('Footer Copyright Text', XT_TEXT_DOMAIN),
						'subtitle' => __('This is a little space under the field title which can be used for additonal info.', XT_TEXT_DOMAIN),
						'default' => '&copy; '.date('Y').' Good News, Inc.'
					),
	
					array(
						'id' => 'sub-footer-bg-color',
						'type' => 'color_rgba',
						'title' => __('Sub Footer Background Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#1e1e1e'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'sub-footer-text-color',
						'type' => 'color_rgba',
						'title' => __('Sub ooter Text Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => '#606060'
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'sub-footer-link-color',
						'type' => 'color_rgba',
						'title' => __('Sub Footer Link Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => xt_option('sub-footer-text-color', 'color')
						),
						'compiler' => array(true)
					),
					array(
						'id' => 'sub-footer-link-hover-color',
						'type' => 'color_rgba',
						'title' => __('Sub Footer Link Hover Color', XT_TEXT_DOMAIN),
						'default' => array(
							'color' => $primary_color
						),
						'compiler' => array(true)
					),
					
					
				)
			);
			

			
			$this->sections[] = array(
				'icon' => 'el-icon-file-edit',
				'icon_class' => 'fa-lg',
				'title' => __('News Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some options that you can edit related to post archives, categories, search results and singles.', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(
					array(
						'id'    => 'posts_post_archives',
						'type'  => 'section',
						'title' => __('Posts Archives / Category', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'post_archive_default_template',
						'type' => 'radio',
						'title' => __('Posts Archive Default Template', XT_TEXT_DOMAIN),
						'options' => XT_Widget_Advanced_News::getLayouts(),
						'default' => 'list-small'
					),	
					array(
						'id'    => 'post_archive_sidebar_position',
						'type'  => 'radio',
						'title' => __('Posts Archive Sidebar Position', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled' => __('Disabled', XT_TEXT_DOMAIN),
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
						),
						'default'   => 'disabled'
					),
					array(
						'id'    => 'post_archive_sidebar_area',
						'required' => array( 'post_archive_sidebar_position', '!=', 'disabled' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Posts Archive Sidebar Widget Area', XT_TEXT_DOMAIN),
						'default'   => ''
					),

					
					array(
						'id' => 'post_archive_show_post_category',
						'type' => 'switch',
						'title' => __('Show post category in archive listing', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_archive_show_post_excerpt',
						'type' => 'switch',
						'title' => __('Show post excerpt in archive listing', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_archive_show_post_date',
						'type' => 'switch',
						'title' => __('Show post date in archive listing', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_archive_show_post_author',
						'type' => 'switch',
						'title' => __('Show post author in archive listing', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_archive_show_post_stats',
						'type' => 'switch',
						'title' => __('Show post stats in archive listing', XT_TEXT_DOMAIN),
						'default' => true
					),

					
					
					array(
						'id' => 'post_archive_category_settings',
						'type' => 'category_settings',
						'title' => __('Posts Archive Settings By Category', XT_TEXT_DOMAIN),
						'subtitle' => __('These settings will override global Category / Archive settings above.', XT_TEXT_DOMAIN),
						'options' =>array(
							'templates' => XT_Widget_Advanced_News::getLayouts(),
							'sidebar_positions' => array(
								'disabled' => __('Disabled', XT_TEXT_DOMAIN),
								'left' => __('Left', XT_TEXT_DOMAIN),
								'right' => __('Right', XT_TEXT_DOMAIN),
							)
						),
					),	

					
					array(
						'id'    => 'posts_post_tags',
						'type'  => 'section',
						'title' => __('Post Tags Results', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'post_tag_default_template',
						'type' => 'radio',
						'title' => __('Post Tags Results Default Template', XT_TEXT_DOMAIN),
						'options' => XT_Widget_Advanced_News::getLayouts(),
						'default' => 'grid-2'
					),	
					array(
						'id'    => 'post_tag_sidebar_position',
						'type'  => 'radio',
						'title' => __('Posts Tags Results Sidebar Position', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled' => __('Disabled', XT_TEXT_DOMAIN),
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
						),
						'default'   => 'disabled'
					),
					array(
						'id'    => 'post_tag_sidebar_area',
						'required' => array( 'post_tag_sidebar_position', '!=', 'disabled' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Post Tags Results Sidebar Widget Area', XT_TEXT_DOMAIN),
						'default'   => ''
					),
					
					array(
						'id' => 'post_tag_show_post_category',
						'type' => 'switch',
						'title' => __('Show post category in tag post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_tag_show_post_excerpt',
						'type' => 'switch',
						'title' => __('Show post excerpt in tag post results', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id' => 'post_tag_show_post_date',
						'type' => 'switch',
						'title' => __('Show post date in tag post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_tag_show_post_author',
						'type' => 'switch',
						'title' => __('Show post author in tag post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_tag_show_post_stats',
						'type' => 'switch',
						'title' => __('Show post stats in tag post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					


					array(
						'id'    => 'posts_author_posts',
						'type'  => 'section',
						'title' => __('Author Posts Results', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'post_author_default_template',
						'type' => 'radio',
						'title' => __('Author Posts Default Template', XT_TEXT_DOMAIN),
						'options' => XT_Widget_Advanced_News::getLayouts(),
						'default' => 'list-small'
					),	
					array(
						'id'    => 'post_author_sidebar_position',
						'type'  => 'radio',
						'title' => __('Author Posts Sidebar Position', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled' => __('Disabled', XT_TEXT_DOMAIN),
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
						),
						'default'   => 'disabled'
					),
					array(
						'id'    => 'post_author_sidebar_area',
						'required' => array( 'post_author_sidebar_position', '!=', 'disabled' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Author Posts Sidebar Widget Area', XT_TEXT_DOMAIN),
						'default'   => ''
					),
					
					array(
						'id' => 'post_author_show_post_category',
						'type' => 'switch',
						'title' => __('Show post category in author post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_author_show_post_excerpt',
						'type' => 'switch',
						'title' => __('Show post excerpt in author post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_author_show_post_date',
						'type' => 'switch',
						'title' => __('Show post date in author post results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_author_show_post_author',
						'type' => 'switch',
						'title' => __('Show post author in author post results', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id' => 'post_author_show_post_stats',
						'type' => 'switch',
						'title' => __('Show post stats in author post results', XT_TEXT_DOMAIN),
						'default' => true
					),

					array(
						'id'    => 'posts_search_posts',
						'type'  => 'section',
						'title' => __('Search Posts Results', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'post_search_default_template',
						'type' => 'radio',
						'title' => __('Search Posts Default Template', XT_TEXT_DOMAIN),
						'options' => XT_Widget_Advanced_News::getLayouts(),
						'default' => 'list-small'
					),	
					array(
						'id'    => 'post_search_sidebar_position',
						'type'  => 'radio',
						'title' => __('Search Posts Sidebar Position', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled' => __('Disabled', XT_TEXT_DOMAIN),
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
						),
						'default'   => 'disabled'
					),
					array(
						'id'    => 'post_search_sidebar_area',
						'required' => array( 'post_search_sidebar_position', '!=', 'disabled' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Search Posts Sidebar Widget Area', XT_TEXT_DOMAIN),
						'default'   => ''
					),
					
					array(
						'id' => 'post_search_show_post_category',
						'type' => 'switch',
						'title' => __('Show post category in posts search results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_search_show_post_excerpt',
						'type' => 'switch',
						'title' => __('Show post excerpt in posts search results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_search_show_post_date',
						'type' => 'switch',
						'title' => __('Show post date in posts search results', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'post_search_show_post_author',
						'type' => 'switch',
						'title' => __('Show post author in posts search results', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id' => 'post_search_show_post_stats',
						'type' => 'switch',
						'title' => __('Show post stats in posts search results', XT_TEXT_DOMAIN),
						'default' => false
					),
										
															
					array(
						'id'    => 'posts_single_posts',
						'type'  => 'section',
						'title' => __('Single Posts', XT_TEXT_DOMAIN),
						'desc' =>  __('<b>NOTE:</b> Most of these settings values can be overridden within each post', XT_TEXT_DOMAIN),
					),		

					array(
						'id'    => 'single_post_default_sidebar_position',
						'type'  => 'radio',
						'title' => __('Single Post Default Sidebar Position', XT_TEXT_DOMAIN),
						'options' => array(
							'disabled' => __('Disabled', XT_TEXT_DOMAIN),
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
						),
						'default'   => 'disabled'
					),					
					array(
						'id'    => 'single_post_default_sidebar',
						'required' => array( 'single_post_default_sidebar_position', '!=', 'disabled' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single Post Default Sidebar', XT_TEXT_DOMAIN),
						'default'   => 'blog-sidebar'
					),

					array(
						'id' => 'single_post_default_sidebar_below_title',
						'type' => 'switch',
						'title' => __('Single Post Default Sidebar Below Title', XT_TEXT_DOMAIN),
						'subtitle' => __('This will make the sidebar appear below the post title header.<br>The post title will be shown in full width', XT_TEXT_DOMAIN),
						'default' => true
					),
																	
					array(
						'id' => 'single_post_featured_image',
						'type' => 'radio',
						'title' => __('Single Post Featured Image Size', XT_TEXT_DOMAIN),
						'options' => array(
							'fullwidth' => __('Full Width', XT_TEXT_DOMAIN),
							'original' => __('Original', XT_TEXT_DOMAIN),
							'none' => __('None', XT_TEXT_DOMAIN)
						),
						'default' => 'fullwidth'
					),	
					array(
						'id' => 'single_post_featured_image_position',
						'required' => array( 'single_post_featured_image', '!=', 'none' ),
						'type' => 'radio',
						'title' => __('Single Post Featured Image Position', XT_TEXT_DOMAIN),
						'subtitle' => '<b>Note:</b> "Behind Title" only works on standard post formats',
						'options' => array(
							'above-title' => __('Above title', XT_TEXT_DOMAIN),
							'below-title' => __('Below Title', XT_TEXT_DOMAIN),
							'behind-title' => __('Behind Title', XT_TEXT_DOMAIN),
							'behind-title-fullwidth' => __('Behind Title Fullwidth', XT_TEXT_DOMAIN),
							'below-excerpt' => __('Below Excerpt', XT_TEXT_DOMAIN),
							'above-content' => __('Above Content', XT_TEXT_DOMAIN)
						),
						'default' => 'above-content'
					),
					
					array(
						'id' => 'show_post_excerpt',
						'type' => 'switch',
						'title' => __('Show post excerpt in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'show_post_date',
						'type' => 'switch',
						'title' => __('Show post date in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'show_post_author',
						'type' => 'switch',
						'title' => __('Show post author Link in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'show_post_author_bio',
						'type' => 'switch',
						'title' => __('Show post author biography in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'show_post_stats',
						'type' => 'switch',
						'title' => __('Show post stats in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'show_post_categories',
						'type' => 'switch',
						'title' => __('Show post categories in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),	
					array(
						'id' => 'show_post_tags',
						'type' => 'switch',
						'title' => __('Show post tags in single posts', XT_TEXT_DOMAIN),
						'default' => true
					),
					
					array(
						'id' => 'single_post_smart_sidebar',
						'type' => 'switch',
						'title' => __('Activate Post Content Smart Sidebar', XT_TEXT_DOMAIN),
						'subtitle' => __('This will activate a sticky sidebar next to the post content', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id'    => 'single_post_smart_sidebar_position',
						'required' => array( 'single_post_smart_sidebar', '=', '1' ),
						'type'  => 'radio',
						'title' => __('Smart Sidebar Position', XT_TEXT_DOMAIN),
						'options' => array(
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
						),
						'default'   => 'left'
					),	
					array(
						'id'    => 'single_post_smart_sidebar_items',
						'required' => array( 'single_post_smart_sidebar', '=', '1' ),
						'title'  => __( 'Smart Content Sidebar', XT_TEXT_DOMAIN ),
						'subtitle' => __("<b>Note:</b> If an item (ex: Social Share) is activated within the smart sidebar, it will automatically be hidden from it's original location", XT_TEXT_DOMAIN),
						'type' => 'sorter',
						'options'  => array(
                            'enabled'  => array(
                            	'social-share' => 'Social Share',
                            	'divider-1' => 'Divider',
                            	'post-author' => 'Post Author',
                            	'post-date' => 'Post Date',
                            	'divider-2' => 'Divider',
                            	'post-stats' => 'Post Stats',
                            	'divider-3' => 'Divider'
                            ),
                            'disabled' => array(
                            	'widget-zone' => 'Widget Zone',
	                            'divider-4' => 'Divider',
	                            'divider-5' => 'Divider',
	                            'divider-6' => 'Divider',
	                            'divider-7' => 'Divider',
                            ),
                        ),
						'default' => ''
					),				
					array(
						'id'    => 'single_post_smart_sidebar_widget_zone',
						'required' => array( 'single_post_smart_sidebar', '=', '1' ),
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Smart Sidebar Widget Zone', XT_TEXT_DOMAIN),
						'subtitle' => __('Make sure that "Widget Zone" is enabled above', XT_TEXT_DOMAIN),
						'default'   => 'smart-content-sidebar-widget-zone'
					),
					
					
					array(
						'id'    => 'single_post_after_content_zone',
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single post after content widget zone', XT_TEXT_DOMAIN),
						'default'   => 'after-single-post-widget-zone'
					),
					array(
						'id'=>'single_post_after_content_zone_layout',
						'required' => array( 'single_post_after_content_zone', '!=', '' ),
						'type' => 'image_select',
						'title' => __( 'Single post after content widget zone layout', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure the widget area would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => 'custom_10_2'
					),
					array(
						'id'    => 'single_post_bottom_zone',
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single post bottom widget zone', XT_TEXT_DOMAIN),
						'default'   => 'single-post-bottom-widget-zone'
					),
					array(
						'id'=>'single_post_bottom_zone_layout',
						'required' => array( 'single_post_bottom_zone', '!=', '' ),
						'type' => 'image_select',
						'title' => __( 'Single post bottom widget zone layout', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure the widget area would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => '1'
					),	
					array(
						'id' => 'show_post_nav_links',
						'type' => 'radio',
						'options' => array(
							'0' => __('Disabled', XT_TEXT_DOMAIN),
							'1' => __('Always Show', XT_TEXT_DOMAIN),
							'2' => __('Show on scroll down after reaching the end of the post', XT_TEXT_DOMAIN)
						),
						'title' => __('Show previous / next post links on single post page', XT_TEXT_DOMAIN),
						'default' => '2'
					),
					

					array(
						'id'    => 'posts_thumbnail_settings',
						'type'  => 'section',
						'title' => __('Thumbnail Settings', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'enable_thumbnail_zoom',
						'type' => 'switch',
						'title' => __('Enable thumbnail zoom on hover', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'enable_thumbnail_border_highlight',
						'type' => 'switch',
						'title' => __('Enable thumbnail border hightlight on hover', XT_TEXT_DOMAIN),
						'default' => false
					)					

				)
			);

			$this->sections[] = array(
				'icon' => 'el-icon-video',
				'icon_class' => 'fa-lg',
				'title' => __('Videos Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some options that you can edit related to video archives, categories, search results and singles.', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(
																				
					array(
						'id'    => 'videos_single_videos',
						'type'  => 'section',
						'title' => __('Single Videos', XT_TEXT_DOMAIN),
					),										

					array(
						'id'    => 'single_video_after_content_zone',
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single video after content widget zone', XT_TEXT_DOMAIN),
						'default'   => 'after-single-video-widget-zone'
					),
					array(
						'id'=>'single_video_after_content_zone_layout',
						'required' => array( 'single_video_after_content_zone', '!=', '' ),
						'type' => 'image_select',
						'title' => __( 'Single video after content widget zone layout', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure the widget area would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => '1'
					),
					array(
						'id'    => 'single_video_bottom_zone',
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single video bottom widget zone', XT_TEXT_DOMAIN),
						'default'   => 'single-video-bottom-widget-zone'
					),
					array(
						'id'=>'single_video_bottom_zone_layout',
						'required' => array( 'single_video_bottom_zone', '!=', '' ),
						'type' => 'image_select',
						'title' => __( 'Single video bottom widget zone layout', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure the widget area would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => '1'
					),	
					array(
                        'id' => 'single_video_player_autoplay',
						'type' => 'switch',
						'title' => __('Auto Play Videos', XT_TEXT_DOMAIN),
						'subtitle' => __( 'Applied to Youtube / Vimeo videos', XT_TEXT_DOMAIN ),
						'default' => true
					)

				)
			);

			
			$this->sections[] = array(
				'icon' => 'el-icon-picture',
				'icon_class' => 'fa-lg',
				'title' => __('Gallery Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some options that you can edit related to Gallery Post Format', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(
																				
					array(
						'id'    => 'galleries_single_galleries',
						'type'  => 'section',
						'title' => __('Single Galleries', XT_TEXT_DOMAIN),
					),										

					array(
						'id'    => 'single_gallery_after_content_zone',
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single gallery after content widget zone', XT_TEXT_DOMAIN),
						'default'   => 'after-single-gallery-widget-zone'
					),
					array(
						'id'=>'single_gallery_after_content_zone_layout',
						'required' => array( 'single_gallery_after_content_zone', '!=', '' ),
						'type' => 'image_select',
						'title' => __( 'Single gallery after content widget zone layout', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure the widget area would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => '1'
					),
					array(
						'id'    => 'single_gallery_bottom_zone',
						'type'  => 'select',
						'options' => xt_get_sidebars(),
						'title' => __('Single gallery bottom widget zone', XT_TEXT_DOMAIN),
						'default'   => 'single-gallery-bottom-widget-zone'
					),
					array(
						'id'=>'single_gallery_bottom_zone_layout',
						'required' => array( 'single_gallery_bottom_zone', '!=', '' ),
						'type' => 'image_select',
						'title' => __( 'Single gallery bottom widget zone layout', XT_TEXT_DOMAIN ),
						'subtitle' => __( 'Defines in which structure the widget area would be divided', XT_TEXT_DOMAIN ),
						'desc' => __( 'Make sure you have enough widgets to fit each column.<br>Note: If you choose a 4 columns structure, you need to have 4 widgets defined within your sidebar', XT_TEXT_DOMAIN ),
						'options' => xt_get_widget_layouts(),
						'default' => '1'
					),	

				)
			);
	
			$this->sections[] = array(
				'icon' => 'el-icon-forward',
				'icon_class' => 'fa-lg',
				'title' => __('Pagination Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('You can control settings related to the reading and navigation of posts.', XT_TEXT_DOMAIN) . '</p><p>' . __('Enter the number of posts per page for each content type to be displayed within archive page templates.', XT_TEXT_DOMAIN) . '<br>' . __('You can control the number of posts for the Posts content type on the <a href="options-reading.php">Reading Settings</a> page.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
		
					array(
						'id' => 'paginate_method',
						'type' => 'radio',
						'title' => __('Pagination Style', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose how to provide "paged" navigation of posts, categories, and archive pages.', XT_TEXT_DOMAIN) . '<br>' . __('You can set how many posts to list on each page on the <a href="options-reading.php">Reading Settings</a> page.', XT_TEXT_DOMAIN),
						'options' => array(
							'posts_nav_link' => __('Displays next and previous links', XT_TEXT_DOMAIN),
							'paginate_links' => __('Displays a row of paginated links', XT_TEXT_DOMAIN),
							'paginate_more' => __('Displays a single link to dynamically load more items', XT_TEXT_DOMAIN),
							'paginate_scroll' => __('Dynamically load more items as you scroll down (infinite scrolling)', XT_TEXT_DOMAIN)
						),
						'default' => 'paginate_links'
					),
					array(
						'id' => 'paginate_position',
						'required' => array(
							array( 'paginate_method', '!=', 'paginate_scroll' )
						),	
						'type' => 'radio',
						'title' => __('Pagination Position', XT_TEXT_DOMAIN),
						'subtitle' => __('Choose a pagination position', XT_TEXT_DOMAIN),
						'options' => array(
							'left' => __('Left', XT_TEXT_DOMAIN),
							'right' => __('Right', XT_TEXT_DOMAIN),
							'center' => __('Center', XT_TEXT_DOMAIN)
						),
						'default' => 'left'
					)
				)
			);
				
			
			$comment_systems = array(
				'wordpress' => __('Wordpress Comments', XT_TEXT_DOMAIN),
				'facebook' => __('Facebook Comments (<a target="_blank" href="https://developers.facebook.com/docs/plugins/comments">More Info</a>) <br><small style="padding-left:24px">NB: Recent Comments widget will not work with this option</small>', XT_TEXT_DOMAIN),
				'disqus' => __('Disqus Comment System (<a target="_blank" href="https://wordpress.org/plugins/disqus-comment-system/">More Info</a>)', XT_TEXT_DOMAIN)
			);
			
			if (function_exists('is_plugin_active') && !is_plugin_active('disqus-comment-system/disqus.php')) {
			
				$comment_systems['disqus'] .= '<br><br><font color="red">'.__('Disqus Comment System Plugin is not installed or inactive', XT_TEXT_DOMAIN).'<br>'.sprintf(__('<a href="%s">Click Here</a> to install / activate this plugin', XT_TEXT_DOMAIN), admin_url('themes.php?page=tgmpa-install-plugins')).'</font>';
			}


			$this->sections[] = array(
				'icon' => 'el-icon-comment',
				'icon_class' => 'fa-lg',
				'title' => __('Comments Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('Here are some comments settings that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(

                    array(
                        'id' => 'comments_enabled',
						'type' => 'switch',
						'title' => __('Comments Enabled', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
                        'id' => 'comments_on_pages',
                        'required' => array( 'comments_enabled', '=', '1' ),
						'type' => 'switch',
						'title' => __('Enable Comments On Pages', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
                        'id' => 'comments_on_vc_pages',
                        'required' => array( 'comments_enabled', '=', '1' ),
						'type' => 'switch',
						'title' => __('Enable Comments On Visual Composer Pages or Posts', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id' => 'comments_type',
                        'required' => array( 'comments_enabled', '=', '1' ),
						'type' => 'radio',
						'title' => __('Comments Type', XT_TEXT_DOMAIN),
						'options' => $comment_systems,
						'default' => 'wordpress'
					),		
					array(
						'id' => 'comments_title_reply',
                        'required' => array( 'comments_enabled', '=', '1' ),
						'type' => 'text',
						'title' => __('Comments Title / Reply Label', XT_TEXT_DOMAIN),
						'default' => __( 'Join the Conversation', XT_TEXT_DOMAIN)
					),
					array(
						'id' => 'comments_title_reply_to',
						'required' => array(
							array( 'comments_enabled', '=', '1' ),
							array( 'comments_type', '=', 'wordpress' )
						),
						'type' => 'text',
						'title' => __('Comments Title Reply To Label', XT_TEXT_DOMAIN),
						'default' => __( 'Leave a Reply to %s', XT_TEXT_DOMAIN )
					),
					array(
						'id' => 'comments_cancel_reply_link',
						'required' => array(
							array( 'comments_enabled', '=', '1' ),
							array( 'comments_type', '=', 'wordpress' )
						),						
						'type' => 'text',
						'title' => __('Comments Cancel Reply Link Label', XT_TEXT_DOMAIN),
						'default' => __( 'Cancel Reply', XT_TEXT_DOMAIN )
					),
					array(
						'id' => 'comments_label_submit',
						'required' => array(
							array( 'comments_enabled', '=', '1' ),
							array( 'comments_type', '=', 'wordpress' )
						),
						'type' => 'text',
						'title' => __('Comments Submit Label', XT_TEXT_DOMAIN),
						'default' => __( 'Post Comment', XT_TEXT_DOMAIN )
					),
					array(
						'id' => 'comments_thankyou_msg',
						'required' => array(
							array( 'comments_enabled', '=', '1' ),
							array( 'comments_type', '=', 'wordpress' )
						),
						'type' => 'text',
						'title' => __('Comments Thank You Message', XT_TEXT_DOMAIN),
						'default' => __( 'Thank you for your comment', XT_TEXT_DOMAIN )
					),
					
					
				)
			);


			$this->sections[] = array(
				'icon' => 'el-icon-thumbs-up',
				'icon_class' => 'fa-lg',
				'title' => __('Likes Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('Here are some likes / dislikes settings that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(
						
                    array(
                        'id' => 'likes_enabled',
						'type' => 'switch',
						'title' => __('Likes Enabled', XT_TEXT_DOMAIN),
						'default' => true
					),				
					array(
						'id'    => 'likes_voting',
						'type' => 'select',
						'options'    => array(
							'1' => __( 'All users', XT_TEXT_DOMAIN ),
							'2' => __( 'Logged In Users Only', XT_TEXT_DOMAIN ),
						 ),
						'title'  => __( 'Likes Allowed for', XT_TEXT_DOMAIN ),
						'default' => '1'
					),
					array(
						'id'  => 'likes_position',
						'type' => 'select',
						'options' => array(
							'left'	 => __( 'Left' , XT_TEXT_DOMAIN ),
							'center' => __( 'Center', XT_TEXT_DOMAIN ),
							'right'  => __( 'Right', XT_TEXT_DOMAIN ),
						),
						'title' => __( 'Select position', XT_TEXT_DOMAIN ),
						'default' => 'left'
					),
					array(
						'id'    => 'likes_font_size',
						'type' => 'select',
						'options' => array(
							'12px' => __( '12px' , XT_TEXT_DOMAIN ),
							'13px' => __( '13px', XT_TEXT_DOMAIN ),
							'14px' => __( '14px', XT_TEXT_DOMAIN ),
							'15px' => __( '15px', XT_TEXT_DOMAIN ),
							'16px' => __( '16px', XT_TEXT_DOMAIN ),
							'17px' => __( '17px', XT_TEXT_DOMAIN ),
							'18px' => __( '18px', XT_TEXT_DOMAIN ),
						),
						'title'    => __( 'Select font size', XT_TEXT_DOMAIN ),
						'default' => '14px'
					),
					array(
						'id'    => 'likes_icon',
						'type' => 'select',
						'options' => array(
							'none'   => __( 'None' , XT_TEXT_DOMAIN ),
							'thumbs' => __( 'Thumb', XT_TEXT_DOMAIN ),
							'angle'  => __( 'Angle', XT_TEXT_DOMAIN ),
							'caret'  => __( 'Caret', XT_TEXT_DOMAIN ),
						),
						'title' => __( 'Select icon', XT_TEXT_DOMAIN ),
						'default' => 'thumbs'
					),

					array(
						'id'    => 'likes_vote_like_link',
						'type' => 'text',
						'default' => __("I found this helpful", XT_TEXT_DOMAIN),
						'title' => __( 'Like text', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_voted_like_single',
						'type' => 'text',
						'default' => __("person found this helpful", XT_TEXT_DOMAIN),
						'title' => __( 'Liked single text', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_voted_like_plural',
						'type' => 'text',
						'default' => __("people found this helpful", XT_TEXT_DOMAIN),
						'title' => __( 'Liked plural text', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_vote_dislike_link',
						'type' => 'text',
						'default' => __("I did not find this helpful", XT_TEXT_DOMAIN),
						'title' => __( 'Dislike text', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_voted_dislike_single',
						'type' => 'text',
						'default' => __("person did not find this helpful", XT_TEXT_DOMAIN),
						'title' => __( 'Disliked single text', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_voted_dislike_plural',
						'type' => 'text',
						'default' => __("people did not find this helpful", XT_TEXT_DOMAIN),
						'title' => __( 'Disliked plural text', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_likes_bgcolor',
						'type'  => 'color',
						'transparent' => false,
						'default' => '#27a159',
						'title' => __( 'Likes button Background color', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_likes_color',
						'type'  => 'color',
						'transparent' => false,
						'default' => '#ffffff',
						'title' => __( 'Likes button Text color', XT_TEXT_DOMAIN ),
					),
					
					array(
						'id'    => 'likes_dislikes_bgcolor',
						'type'  => 'color',
						'transparent' => false,
						'default' => '#ebebeb',
						'title' => __( 'Dislikes button Background color', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_dislikes_color',
						'type'  => 'color',
						'transparent' => false,
						'default' => '#7d7d7d',
						'title' => __( 'Dislikes button Text color', XT_TEXT_DOMAIN ),
					),
					array(
						'id'    => 'likes_custom-css',
						'type' => 'ace_editor',
						'mode'      => 'css',
                        'theme'     => 'chrome',
						'title' => __( 'Custom CSS code', XT_TEXT_DOMAIN ),
						'default' => '',
					),
					array(
						'id'    => 'likes_reset-all-votes',
                        'type'   => 'callback',
						'title' => __( 'Reset all votes', XT_TEXT_DOMAIN ),
                        'callback'  => 'xt_likes_reset_all'
                    ),
             	)
			);       
                    	
                
            global $XT_SocialShare;
            $XT_SocialShare = new XT_SocialShare();
                 
            $this->sections[] = array(
				'icon' => 'el-icon-share-alt',
				'icon_class' => 'fa-lg',
				'title' => __('Sharing Settings', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('Here are some posts sharing settings that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(
						
                    
                    array(
						'id'    => 'xtss_settings',
						'type'  => 'section',
						'title' => __('Social Share Settings', XT_TEXT_DOMAIN),
					),
                    array(
                        'id' => 'xtss_enabled',
						'type' => 'switch',
						'title' => __('Social Share Enabled', XT_TEXT_DOMAIN),
						'default' => true
					),			
					array(
						'id'    => 'xtss_networks',
						'title'  => __( 'Social Share Networks', XT_TEXT_DOMAIN ),
						'type' => 'sorter',
						'options'  => array(
                            'enabled'  => $XT_SocialShare->getProvidersNames(),
                            'disabled' => array(),
                        ),
						'default' => ''
					),
					array(
						'id' => 'xtss_twitter_username',
						'type' => 'text',
						'title'  => __( 'Twitter Username', XT_TEXT_DOMAIN ),
						'default' => ''
					),
					array(
						'id'    => 'xtss_skin',
						'title'  => __( 'Social Share Skin', XT_TEXT_DOMAIN ),
						'type' => 'radio',
						'options'  => $XT_SocialShare->getSkins(),
						'default' => 'default'
					),
					array(
						'id' => 'xtss_show_title',
						'type' => 'switch',
						'title'  => __( 'Social Share Show Title', XT_TEXT_DOMAIN ),
						'default' => true
					),
					array(
						'id' => 'xtss_title',
						'required' => array( 'xtss_show_title', '=', true ),
						'type' => 'text',
						'title'  => __( 'Social Share Title', XT_TEXT_DOMAIN ),
						'default' => __( 'Share', XT_TEXT_DOMAIN )
					),
					array(
						'id'    => 'xtss_align',
						'title'  => __( 'Social Share Position', XT_TEXT_DOMAIN ),
						'type' => 'radio',
						'options'  => array(
							'left' => __( 'Left', XT_TEXT_DOMAIN ),
							'right' => __( 'Right', XT_TEXT_DOMAIN ),
							'center' => __( 'Centered', XT_TEXT_DOMAIN )

						),	
						'default' => 'left'
					),
					array(
						'id'    => 'xtss_layout',
						'title'  => __( 'Social Share Layout', XT_TEXT_DOMAIN ),
						'type' => 'radio',
						'options'  => array(
							'horizontal' => __( 'Horizontal', XT_TEXT_DOMAIN ),
							'vertical' => __( 'Vertical', XT_TEXT_DOMAIN )
						),	
						'default' => 'horizontal'
					),
					array(
						'id' => 'xtss_is_fullwidth',
						'required' => array( 'xtss_layout', '=', 'vertical' ),
						'type' => 'switch',
						'title'  => __( 'Social Share Full Width Items', XT_TEXT_DOMAIN ),
						'subtitle' => __('This will force a same width to all items', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id'    => 'xtss_size',
						'title'  => __( 'Social Share Size', XT_TEXT_DOMAIN ),
						'type' => 'radio',
						'options'  => array(
							'small' => __( 'Small', XT_TEXT_DOMAIN ),
							'medium' => __( 'Medium', XT_TEXT_DOMAIN ),
							'large' => __( 'Large', XT_TEXT_DOMAIN )
						),	
						'default' => 'small'
					),
					array(
						'id' => 'xtss_radius',
						'type' => 'switch',
						'title'  => __( 'Add Radius To Social Icons', XT_TEXT_DOMAIN ),
						'default' => true
					),
					array(
						'id' => 'xtss_rounded',
						'type' => 'switch',
						'title'  => __( 'Make Social Icons Rounded', XT_TEXT_DOMAIN ),
						'default' => false
					),

					array(
						'id' => 'xtss_show_names',
						'type' => 'switch',
						'title'  => __( 'Shows Social Networks Names', XT_TEXT_DOMAIN ),
						'default' => false
					),
										
					array(
						'id' => 'xtss_show_shares',
						'type' => 'switch',
						'title'  => __( 'Shows Social Share Count', XT_TEXT_DOMAIN ),
						'default' => false
					),
					
					array(
						'id' => 'xtss_show_total_shares',
						'type' => 'switch',
						'title'  => __( 'Shows Total Social Share Count', XT_TEXT_DOMAIN ),
						'default' => false
					),
					
			 	)
			);    		
					        	
                    				
			$this->sections[] = array(
				'icon' => 'el-icon-facebook',
				'icon_class' => 'fa-lg',
				'title' => __('Social Media', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('Here are some social settings that you can edit. This will be used to create the follow us buttons.', XT_TEXT_DOMAIN) . '</p>',
				'fields'     => array(

					array(
                       	'id' => 'social_icons',
		                'type' => 'networks',
						'title'    => _x('Social Icons', 'Theme Options', XT_TEXT_DOMAIN),
						'subtitle' => _x('Add / update social media icons.', 'Theme Options', XT_TEXT_DOMAIN),
					 	'placeholder'   => array(
                            'name'      => __('Social Network Name', XT_TEXT_DOMAIN),
                            'url'       => __('Social Network URL', XT_TEXT_DOMAIN),
                        )
                    ),

				)
			);


			$this->sections[] = array(
				'icon' => 'el-icon-user',
				'icon_class' => 'fa-lg',
				'title' => __('Registrations', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some login / registration settings that you can edit.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(

					
					array(
						'id'    => 'register_settings',
						'type'  => 'section',
						'title' => __('Registration Settings', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'enable_frontend_register',
						'type' => 'switch',
						'title' => __('Enable Front-end Registration', XT_TEXT_DOMAIN),
						'subtitle' => __('This feature requires you to enable WordPress memberships within the <a href="'.admin_url('options-general.php').'">general settings</a>', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'frontend_register_label',
						'required' => array( 'enable_frontend_register', '=', true ),
						'type' => 'text',
						'title' => __('Register Link Label', XT_TEXT_DOMAIN),
						'subtitle' => __('This link will appear in the site top bar', XT_TEXT_DOMAIN),
						'default' => 'Become a member'
					),
					array(
						'id' => 'frontend_register_type',
						'required' => array( 'enable_frontend_register', '=', true ),
						'type' => 'radio',
						'options' => array(
							'page' => __( 'Register Page Template', XT_TEXT_DOMAIN ),
							'lightbox'   => __( 'Light Box Register Form' , XT_TEXT_DOMAIN ),
						),
						'title' => __('Register Form Type', XT_TEXT_DOMAIN),
						'default' => 'lightbox'
					),
					array(
						'id' => 'frontend_register_page',
						'type'      => 'select',
                        'data'      => 'pages',
						'title' => __('Register Page', XT_TEXT_DOMAIN)
					),
									
					array(
						'id'    => 'login_settings',
						'type'  => 'section',
						'title' => __('Login Settings', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'enable_frontend_login',
						'type' => 'switch',
						'title' => __('Enable Front-end Login', XT_TEXT_DOMAIN),
						'default' => true
					),
					array(
						'id' => 'frontend_login_label',
						'required' => array( 'enable_frontend_login', '=', true ),
						'type' => 'text',
						'title' => __('Login Link Label', XT_TEXT_DOMAIN),
						'subtitle' => __('This link will appear in the site top bar', XT_TEXT_DOMAIN),
						'default' => 'Login'
					),
					array(
						'id' => 'frontend_login_type',
						'required' => array( 'enable_frontend_login', '=', true ),
						'type' => 'radio',
						'options' => array(
							'page' => __( 'Login Page Template', XT_TEXT_DOMAIN ),
							'lightbox'   => __( 'Light Box Login Form' , XT_TEXT_DOMAIN ),
						),
						'title' => __('Login Type', XT_TEXT_DOMAIN),
						'default' => 'lightbox'
					),
					array(
						'id' => 'frontend_login_page',
						'type'      => 'select',
                        'data'      => 'pages',
						'title' => __('Login Page', XT_TEXT_DOMAIN)
					),
					array(
						'id' => 'frontend_login_redirect_page',
						'required' => array( 'enable_frontend_login', '=', true ),
						'type'      => 'select',
                        'data'      => 'pages',
						'title' => __('Login Redirect Page', XT_TEXT_DOMAIN),
						'subtitle' => __('Leave empty to redirect to the referrer page.', XT_TEXT_DOMAIN),
					),
					array(
						'id' => 'frontend_login_remember_me',
						'required' => array( 'enable_frontend_login', '=', true ),
						'type'      => 'switch',
						'title' => __('Enable Remember Me', XT_TEXT_DOMAIN),
						'default' => true
					),
					
					array(
						'id'    => 'account_menu_settings',
						'type'  => 'section',
						'title' => __('Account Menu Settings', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'account_menu_show_profile_link',
						'type' => 'switch',
						'title' => __('Show profile link', XT_TEXT_DOMAIN),
						'default' => true
					),
					
					array(
						'id'    => 'facebook_connect_settings',
						'type'  => 'section',
						'title' => __('Facebook Connect Settings', XT_TEXT_DOMAIN),
					),
					
					array(
						'id' => 'enable_facebook_connect',
						'type' => 'switch',
						'title' => __('Enable Facebook Connect', XT_TEXT_DOMAIN),
						'default' => false
					),
					
					array(
						'id' => 'facebook_appid',
						'required' => array( 'enable_facebook_connect', '=', true ),
						'type' => 'text',
						'title' => __('Facebook App ID', XT_TEXT_DOMAIN),
						'default' => ''
					),

				)
			);					
					
			$this->sections[] = array(
				'icon' => 'el-icon-photo',
				'icon_class' => 'fa-lg',
				'title' => __('Fav Icons & Metadata', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('These are some metadata options that you can edit, including favicons and a short title for mobile home screens.<br>You can use this online tool to easily generate your favicons. <a href="http://iconifier.net" target="_blank" />http://iconifier.net/</a>', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
					array(
						'id' => 'meta_favicon',
						'type'      => 'media',
                        'preview'   => false,
						'title' => __('Favicon', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your shortcut icon', XT_TEXT_DOMAIN),
						'default' => get_template_directory_uri().'/images/icons/favicon.ico',
						'desc' => 'Icon Size: 32px &times; 32px',
						'class' => 'greybg'
					),
					array(
						'id' => 'meta_apple_touch_icon',
						'type'      => 'media',
                        'preview'   => false,
						'title' => __('Apple Touch Icon (57x57)', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your shortcut icon', XT_TEXT_DOMAIN),
						'default' => get_template_directory_uri().'/images/icons/apple-touch-icon-57x57-precomposed.png',
						'desc' => 'Precomposed. Icon Size: 57px &times; 57px. For iPhone 3GS, 2011 iPod Touch and older Android devices.',
						'class' => 'greybg'
					),
					array(
						'id' => 'meta_apple_touch_icon_72x72',
						'type'      => 'media',
                        'preview'   => false,
						'title' => __('Apple Touch Icon (72x72)', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your shortcut icon', XT_TEXT_DOMAIN),
						'default' => get_template_directory_uri().'/images/icons/apple-touch-icon-72x72-precomposed.png',
						'desc' => 'Precomposed. Icon Size: 72px &times; 72px. For 1st generation iPad, iPad 2 and iPad mini.',
						'class' => 'greybg'
					),
					array(
						'id' => 'meta_apple_touch_icon_114x114',
						'type'      => 'media',
                        'preview'   => false,
						'title' => __('Apple Touch Icon (114x114)', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your shortcut icon', XT_TEXT_DOMAIN),
						'default' => get_template_directory_uri().'/images/icons/apple-touch-icon-114x114-precomposed.png',
						'desc' => 'Precomposed. Icon Size: 114px &times; 114px. For iPhone 4, 4S, 5 and 2012 iPod Touch.',
						'class' => 'greybg'
					),
					array(
						'id' => 'meta_apple_touch_icon_144x144',
						'type'      => 'media',
                        'preview'   => false,
						'title' => __('Apple Touch Icon (144x144)', XT_TEXT_DOMAIN),
						'subtitle' => __('Upload your shortcut icon', XT_TEXT_DOMAIN),
						'default' => get_template_directory_uri().'/images/icons/apple-touch-icon-144x144-precomposed.png',
						'desc' => 'Precomposed. Icon Size: 144px &times; 144px. For iPad 3rd and 4th generation.',
						'class' => 'greybg'
					),
					array(
						'id' => 'meta_apple_mobile_web_app_title',
						'type' => 'text',
						'title' => __('Apple Mobile Web App Title', XT_TEXT_DOMAIN),
						'desc' => '<br><br>Sets a different title for an iOS Home Screen icon. By default, Mobile Safari crops document titles to 13 characters.',
						'default' => ''
					),
				)
			);
		
				
			$this->sections[] = array(
				'icon' => 'el-icon-error',
				'icon_class' => 'fa-lg',
				'title' => __('404 Error', XT_TEXT_DOMAIN),
				'desc' => '<p class="description">' . __('Here you can edit the 404 error page content.', XT_TEXT_DOMAIN) . '</p>',
				'fields' => array(
					array(
						'id' => '404_page_title',
						'type' => 'text',
						'title' => __('Page Title', XT_TEXT_DOMAIN),
						'default' => 'Page not found'
					),
					array(
						'id' => '404_page_content',
						'type' => 'editor',
						'wpautop' => true,
						'title' => __('Page Content', XT_TEXT_DOMAIN),
						'default' => 'Oops, are you lost? The content you were looking for is not here.<br><a href="'.home_url('/').'">Return to home page</a>'
					)
				)
			);
			
			
			
			if (function_exists('is_plugin_active') && is_plugin_active('woocommerce/woocommerce.php')) {
		
				$this->sections[] = array(
					'icon' => ' el-icon-shopping-cart',
					'icon_class' => 'fa-lg',
					'title' => __('WooCommerce', XT_TEXT_DOMAIN),
					'desc' => '<p class="description">' . __('Here are some WooCommerce settings that you can edit.', XT_TEXT_DOMAIN) . '</p>',
					'fields' => array(

						array(
							'id' => 'woo_hide_single_product_page_title',
							'type' => 'switch',
							'title' => __('Hide page title on single product pages', XT_TEXT_DOMAIN),
							'default' => false
						),
						array(
							'id' => 'woo_header_enable_cart_count',
							'type' => 'radio',
							'title' => __('Show Cart Count within the site top bar', XT_TEXT_DOMAIN),
							'options' => array(
								'0' => __( 'No', XT_TEXT_DOMAIN ),
								'1' => __( 'Yes' , XT_TEXT_DOMAIN ),
								'2' => __( 'Only if cart is not empty' , XT_TEXT_DOMAIN ),
							),
							'default' => true
						),
						array(
							'id' => 'woo_header_cart_menu_title',
							'required' => array( 'woo_header_enable_cart_count', '!=', 0 ),
							'type' => 'text',
							'title' => __('Cart Menu Title', XT_TEXT_DOMAIN),
							'subtitle' =>  __('Only shopping cart icon shown by default. You can append a title. Eg. "Cart"', XT_TEXT_DOMAIN),
							'default' => ''
						),
						array(
							'id' => 'woo_header_enable_cart_dropdown',
							'required' => array( 'woo_header_enable_cart_count', '!=', 0 ),
							'type' => 'switch',
							'title' => __('Enable Mini Cart Dropdown within the site top bar', XT_TEXT_DOMAIN),
							'default' => true
						)
					)
				);
				
			}	
	                
			$this->sections[] = array(
                'type' => 'divide',
            );

            $this->sections[] = array(
                'title'     => __('Performance Settings', XT_TEXT_DOMAIN),
                'desc'      => __('Here are couple of caching settings that will make your site run faster', XT_TEXT_DOMAIN),
                'icon'      => 'el-icon-wrench',
                'fields'    => array(
/*
                    array(
						'id' => 'cache_nav_menus',
						'type' => 'switch',
						'title' => __('Cache Menus Output', XT_TEXT_DOMAIN),
						'subtitle' =>  __('The cache will only be flushed when menus are updated within the backend', XT_TEXT_DOMAIN),
						'default' => false
					),
*/
					array(
						'id' => 'cache_vc_widgets',
						'type' => 'switch',
						'title' => __('Cache Visual Composer Widgets', XT_TEXT_DOMAIN),
						'subtitle' =>  __('The cache will only be flushed when pages are updated within the backend or if the cache expired based on the below timeout', XT_TEXT_DOMAIN),
						'default' => false
					),
					array(
						'id' => 'cache_vc_widgets_timeout',
						'required' => array( 'cache_vc_widgets', '=', 1 ),
						'type'          => 'slider',
						'title' => __('Visual Composer Widgets Cache Timeout in minutes', XT_TEXT_DOMAIN),
						'subtitle' =>  __('Select Between 15 minutes up to 1 week', XT_TEXT_DOMAIN),
                        'default'       => 60,
                        'min'           => 15,
                        'step'          => 15,
                        'max'           => 10080,
                        'display_value' => 'label'
					)
                ),
            );    
            
            		
			$this->sections[] = array(
                'type' => 'divide',
            );

            $this->sections[] = array(
                'title'     => __('Import / Export', XT_TEXT_DOMAIN),
                'desc'      => __('Import and Export your Redux Framework settings from file, text or URL.', XT_TEXT_DOMAIN),
                'icon'      => 'el-icon-refresh',
                'fields'    => array(
                    array(
                        'id'            => 'opt-import-export',
                        'type'          => 'import_export',
                        'title'         => 'Import Export',
                        'subtitle'      => 'Save and restore your Redux options',
                        'full_width'    => false,
                    ),
                ),
            );                     

			if($currently_in_options) {
				
	            $this->sections[] = array(
	                'icon'      => 'el-icon-info-sign',
	                'title'     => __('Theme Information', XT_TEXT_DOMAIN),
	                'fields'    => array(
	                    array(
	                        'id'        => 'opt-raw-info',
	                        'type'      => 'raw',
	                        'content'   => $item_info,
	                    )
	                ),
	            );
			}


			
        }

        public function setHelpTabs() {

/*
            // Custom page help tabs, displayed using the help API. Tabs are shown in order of definition.
            $this->args['help_tabs'][] = array(
                'id'        => 'redux-help-tab-1',
                'title'     => __('Theme Information 1', XT_TEXT_DOMAIN),
                'content'   => __('<p>This is the tab content, HTML is allowed.</p>', XT_TEXT_DOMAIN)
            );

            $this->args['help_tabs'][] = array(
                'id'        => 'redux-help-tab-2',
                'title'     => __('Theme Information 2', XT_TEXT_DOMAIN),
                'content'   => __('<p>This is the tab content, HTML is allowed.</p>', XT_TEXT_DOMAIN)
            );

            // Set the help sidebar
            $this->args['help_sidebar'] = __('<p>This is the sidebar content, HTML is allowed.</p>', XT_TEXT_DOMAIN);
*/
        }

        /**

          All the possible arguments for Redux.
          For full documentation on arguments, please refer to: https://github.com/ReduxFramework/ReduxFramework/wiki/Arguments

         * */
        public function setArguments() {

            $this->args = array (
			  'opt_name' => XT_THEME_ID,
			  'global_variable' => 'xt_options',
			  'admin_bar' => '1',
			  'allow_sub_menu' => '1',
			  'customizer' => '1',
			  'default_mark' => '*',
			  'footer_text' => false,
			  'hints' => 
			  array (
			    'icon' => 'el-icon-info-sign',
			    'icon_position' => 'right',
			    'icon_size' => 'normal',
			    'tip_style' => 
			    array (
			      'color' => 'light',
			    ),
			    'tip_position' => 
			    array (
			      'my' => 'top left',
			      'at' => 'bottom right',
			    ),
			    'tip_effect' => 
			    array (
			      'show' => 
			      array (
			        'effect' => 'fade',
			        'duration' => '500',
			        'event' => 'mouseover',
			      ),
			      'hide' => 
			      array (
			        'effect' => 'fade',
			        'duration' => '500',
			        'event' => 'mouseleave unfocus',
			      ),
			    ),
			  ),
			  'intro_text' => false,
			  'menu_title' => XT_THEME_NAME,
			  'menu_type' => 'menu',
			  'output' => '1',
			  'output_tag' => '1',
			  'page_icon' => 'icon-themes',
			  'page_parent_post_type' => 'your_post_type',
			  'page_permissions' => 'manage_options',
			  'page_slug' => XT_THEME_OPTIONS_PAGE,
			  'page_title' => XT_THEME_NAME,
			  'save_defaults' => '1',
			  'show_import_export' => '1',
			  'dev_mode' => false
			);

            $theme = wp_get_theme(); // For use with some settings. Not necessary.
            $this->args["display_name"] = $theme->get("Name");
            $this->args["display_version"] = $theme->get("Version");

			// SOCIAL ICONS -> Setup custom links in the footer for quick links in your panel footer icons.
/*
            $this->args['share_icons'][] = array(
                'url'   => 'https://www.facebook.com/',
                'title' => 'Like us on Facebook',
                'icon'  => 'el-icon-facebook'
            );
            $this->args['share_icons'][] = array(
                'url'   => 'http://twitter.com/',
                'title' => 'Follow us on Twitter',
                'icon'  => 'el-icon-twitter'
            );
*/

        }

    }

	add_action('init', 'xt_init_redux_config');
}


function xt_init_redux_config() {
	
	global $reduxConfig;
    $reduxConfig = new XT_Redux_Framework_config();			    
}

/**
  Custom function for the callback referenced above
 */
if (!function_exists('xt_likes_reset_all')):
    function xt_likes_reset_all($field, $value) {

        $ajax_nonce = wp_create_nonce( "xt-likes-reset-votes" );

    ?>
    
	<input type="button" name="<?php echo esc_attr($field["name"]); ?>" id="<?php echo esc_attr($field['id']); ?>" class="button button-secondary" value="<?php echo esc_attr( $field['title'] ); ?>" />
	<label for="<?php echo esc_attr($field['id']); ?>" style="display:none;"><?php echo esc_attr( $field['title'] ); ?></label>
	<script type="text/javascript">
		jQuery(document).ready(function($){
			$("#<?php echo esc_js($field['id']);?>").click(function(){
				if ( confirm("Are you want to reset all votes?") ) {
					var data = {
						action : 'xt_likes_reset_all',
						security : '<?php echo esc_js($ajax_nonce); ?>',
					};
					
					$.post(ajaxurl, data, function(response) {
						alert(response);
					});
				}
				
			});
		});
	</script> 
	
	<?php       
    }
endif;

